#include "ocStack.oh"
#include <stdio.h>

static void oBoolCopy(obliv bool* dest, const obliv bool* src, size_t boolCount) obliv {
	int i;
	for(i=0; i<boolCount; i++){
		dest[i] = src[i];
	}
}

static void oBoolCopyReverse(obliv bool* dest, const obliv bool* src, size_t itemCount, size_t itemSize) obliv {
	int i,j;
	for(i=0; i<itemCount; i++){
		for(j=0; j<itemSize; j++){
			dest[(itemCount-i-1)*itemSize+j] = src[i*itemSize+j];
		}
	}
}

//calloc defaults values to 0
static ocStack* ocStackCreate(int n, int level, int itemSize){
    if(n<=0)
        return NULL;
    int blockSize = 1<<level;
	int blockNum;
	if(n/blockSize == 1)
		blockNum=1;
	else if(n/blockSize % 2 == 0)//even
		blockNum = 2;
	else //odd 
		blockNum = 3;
    ocStack* s = calloc(1, sizeof (ocStack));
    s->itemSize = itemSize;
    s->level = level;
    s->buffer = calloc(1, 5*itemSize*blockSize*(sizeof (obliv bool)));
    s->next = ocStackCreate(n - blockNum*blockSize, level+1, itemSize);
    return s;
}

ocStack* ocStackNew(int n, int itemSize){
    return ocStackCreate(n,0, itemSize);
}

//Assume stack already allocated with enough space
static void fillFromList(ocStack* s, obliv bool data[], int lim, int level, int itemSize){
    if(lim<=0)
        return;
    s->level = level;
    int blockSize = 1<<level;
	int blockNum;
	if(lim/blockSize == 1)
		blockNum=1;
	else if(lim/blockSize % 2 == 0)//even
		blockNum = 2;
	else //odd 
		blockNum = 3;
	s->head = blockNum;
    oBoolCopyReverse(s->buffer, data, blockNum*blockSize, itemSize);
    s->maxSize = blockNum;
    fillFromList(s->next, data+blockNum*itemSize*blockSize, lim-blockNum*blockSize, level+1, itemSize);
}

ocStack* ocStackFromList(obliv bool data[], int lim, int itemSize){
    ocStack* s = ocStackNew(lim, itemSize);
    fillFromList(s, data, lim, 0, itemSize); 
    return s;
}

//cap is not implemented. TODO
void capLength(ocStack *s, int cap){
    s->cap = cap; 
    if(s->next!=NULL && cap>1) 
        capLength(s->next, (cap-2)/2);
}

void peek(obliv bool* dest, frozen ocStack *s){
    int i;
    for(i=0; i < 5; i++){
        obliv if(i==(s->head-1)){
            int i;
            oBoolCopy(dest, s->buffer+i*s->itemSize, s->itemSize);
        }
    }
}

//Test for edge cases, null or not enough to shift.
static void shiftLeft(frozen ocStack *s){
    s->popCount=0;
    //if next is null, do nothing.
    if(s->next==NULL)
        return;
    int level = s->level;
    int nxtBlockSize = 1<<(level+1);
    int curBlockSize = 1<<level;
    obliv if(s->head<2){
		//rotate remaining data to the front. If head is 0, then only garbage data is shifted
		oBoolCopy(s->buffer+2*curBlockSize*s->itemSize, s->buffer, s->itemSize*curBlockSize);
		int j;
		for(j=0; j < 5; j++){
			obliv if(j==s->next->head-1){
				oBoolCopy(s->buffer,
						s->next->buffer + j * nxtBlockSize * s->itemSize, 
						nxtBlockSize*s->itemSize);
			}
		}
		s->head+=2;
		s->next->head--;
    }
    s->next->popCount++;
    if(s->next->popCount>=2)
        shiftLeft(s->next);
}

//assume there is space to shift into, and buffers have been allocated
static void shiftRight(frozen ocStack *s){
    s->pushCount=0;
    //if next is null, do nothing.
    if(s->next==NULL)
        return;
    int level = s->level;
    int nxtBlockSize = 1<<(level+1);
    int curBlockSize = 1<<level;
    obliv if(s->head>=4){
		int j;
		for(j=0; j < 5; j++){
			obliv if(j==s->next->head){
				oBoolCopy(s->next->buffer+j * nxtBlockSize * s->next->itemSize, 
						s->buffer, nxtBlockSize*s->itemSize);
			}
		}
        s->head-=2;
        s->next->head++;
        oBoolCopy(s->buffer, s->buffer + 2*curBlockSize*s->itemSize, 3*curBlockSize*s->itemSize);
    }
    s->next->pushCount++;
    if(s->next->pushCount==2){
        shiftRight(s->next);
    }
}

void pop(obliv bool* dest, frozen ocStack *s) obliv{
    int i;
    for(i=0; i < 5; i++){
        obliv if(i==(s->head-1)){
            oBoolCopy(dest, s->buffer+i*s->itemSize, s->itemSize);
        }
    }
    s->head--;
    ~obliv(cond){
        s->popCount++;
        if (s->popCount>=2)
            shiftLeft(s);
    }
}

void modifyTop(frozen ocStack *s, obliv bool* b) obliv{
    for(int i=0; i < 5; i++){
        obliv if(i==(s->head-1)){
            oBoolCopy(s->buffer+i*s->itemSize, b, s->itemSize);
        }
    }
}

static void incMax(frozen ocStack *s){
    int blockSize = 1<<(s->level+1);
    s->maxSize++;
    if(s->maxSize<4)
        return;
    else{
        if(s->next == NULL){
            s->next = calloc(1, sizeof (ocStack));
            s->next->buffer = calloc(1, 5*s->itemSize*blockSize*(sizeof (obliv bool)));
            s->next->level = s->level+1;
            s->next->itemSize = s->itemSize;
            if(s->cap>1)
                s->next->cap = (s->cap-2)/2;
        }
        s->maxSize-=2;
        incMax(s->next);
    }
}

void push(frozen ocStack *s, obliv bool* b) obliv{
    ~obliv(cond){
        incMax(s); //also allocated extra space if required.
        obliv if(cond){
            int i;
            for(i=0; i < 5; i++){
                obliv if(i==(s->head)){
                    oBoolCopy(s->buffer+i*s->itemSize, b, s->itemSize);
                }
            }
            s->head++;
        }
        s->pushCount++;
        if (s->pushCount>=2)
            shiftRight(s);
    }
}

void ocStackRelease(ocStack* s){
    if(s->next != NULL)
        ocStackRelease(s->next);
    free(s->buffer);
    free(s);
}
